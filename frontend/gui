#!/usr/bin/perl

use strict;
use warnings;

use 5.010;

use Gtk2;
use Gtk2::SimpleList;

my $config_file = $ARGV[0] // 'hostman.cfg';

sub delete_event {
    Gtk2->main_quit;
    return 0;
}

Gtk2->init;

my $window = Gtk2::Window->new('toplevel');
$window->set_title("Hosts manager");
$window->set_border_width(5);
$window->signal_connect(delete_event => \&delete_event);


my ($res_path, $fields) = get_config_settings();

# List
my $hosts_list = Gtk2::SimpleList->new (map { $_->{'gui_name'} => 'text' } @$fields);

# Frame
my $hosts_list_frame = Gtk2::Frame->new('Hosts');

# Add Hosts list to frame
$hosts_list_frame->add($hosts_list);

$window->add($hosts_list_frame);
$window->show_all;

my $hosts = collect_hosts_info();

use Data::Dumper;
warn Dumper($hosts);

display_hosts_info($hosts_list, $hosts, $fields);

Gtk2->main;

exit(0);

# Show hosts info table
sub display_hosts_info {
    my ($hosts_list, $hosts_info, $fields) = @_;

    foreach my $host_id (sort keys %$hosts_info) {
        my $host = $hosts_info->{$host_id};
        $hosts_list->{data}->[$host_id] = [
            map {
                my $val = $host->{$_->{name}} // "";

                ($_->{regexp}) ? ($val) = $val =~ /$_->{regexp}/ : $val;
            } @$fields
        ];
    };
}

# Get info about scanned hosts from files
sub collect_hosts_info {
    my %hosts;
    my $info_files = get_info_files_list($res_path);

    foreach my $fl_name (@$info_files) {
        my ($host_id, $host_info) = get_host_info($res_path . $fl_name);
        $hosts{$host_info->{ip}} = $host_info;
    };

    return \%hosts;
}

# Return list of the host info files
sub get_info_files_list {
    my ($dir) = @_;

    my @files_list;

    opendir(DIR, $dir) or failed("Can't open directory '$dir': $!");

    while (my $file = readdir(DIR)) {

        # Use a regular expression to ignore files beginning with a period
        next if ($file =~ m/^\./ || $file !~ /^host_\d+\.info/);
        push @files_list, $file;
    }

    closedir(DIR);

    return \@files_list;
}

# Get info about host
sub get_host_info {
    my ($info_file_name) = @_;

    my %host_info;

    my ($host_id) = $info_file_name =~ /^host_(\d+)/;

    my $file_data = read_file($info_file_name);

    foreach my $row (@$file_data) {
        if ($row =~ /^(.+)=(.+)$/) {
            $host_info{$1} = $2;
        }
    }

    return($host_id, \%host_info);
}

# It returns info about host's fields (for parsing of the results)
# It returns path to the .info files
# from configuration file
sub get_config_settings {
    my @fields;     # Scanning fields description
    my $res_path;   # Path to the files with scan results

    my $file_data = read_file($config_file);

    my $section;
    foreach my $row (@$file_data) {

        next if $row =~ /^\#/ or !length($row);

        # Detect HOST_INFO section
        if ($row =~ /^\[(\w+)\]/) {
            $section = $1;
            next;
        }

        # Parse strings from HOST_INFO section
        if ($section eq 'HOST_INFO') {
            my ($name, $gui_name, $regexp) = split('\s{4,}', $row);
            push @fields, {
                'name'      => $name,
                'gui_name'  => $gui_name,
                'regexp'    => $regexp,
            };
        }

        # Parse strings from SETTINGS section
        elsif($section eq "SETTINGS") {
            $res_path = $1 if ($row =~ /^RES_PATH=(.*)$/);
        }
    }

    return ($res_path, \@fields);
}

sub read_file {
    my ($filename) = @_;

    my @file_data;

    open(my $fh, '<', $filename)
        or failed("Could not open file '$filename': '$!'");

    while (my $row = <$fh>) {
        chomp $row;
        push @file_data, $row;
    }

    close $fh;

    return \@file_data;
}

sub failed {
    my ($err_txt) = @_;

    say "Error.\n$err_txt\nSyntax: gui [hostman_cfg_file]";

    exit(1);
}
